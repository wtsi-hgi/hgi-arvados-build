---
layout: default
navsection: installguide
title: Install Keepproxy server
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

The Keepproxy server is a gateway into your Keep storage. Unlike the Keepstore servers, which are only accessible on the local LAN, Keepproxy is suitable for clients located elsewhere on the internet. Specifically, in contrast to Keepstore:
* A client writing through Keepproxy generates less network traffic: the client sends a single copy of a data block, and Keepproxy sends copies to the appropriate Keepstore servers.
* A client can write through Keepproxy without precomputing content hashes. Notably, the browser-based upload feature in Workbench requires Keepproxy.
* Keepproxy checks API token validity before processing requests. (Clients that can connect directly to Keepstore can use it as scratch space even without a valid API token.)

By convention, we use the following hostname for the Keepproxy server:

<div class="offset1">
table(table table-bordered table-condensed).
|_Hostname_|
|keep.@uuid_prefix@.your.domain|
</div>

This hostname should resolve from anywhere on the internet.

h2. Install Keepproxy

On Debian-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo apt-get install keepproxy</span>
</code></pre>
</notextile>

On Red Hat-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo yum install keepproxy</span>
</code></pre>
</notextile>

Verify that Keepproxy is functional:

<notextile>
<pre><code>~$ <span class="userinput">keepproxy -h</span>
...
Usage: keepproxy [-config path/to/keepproxy.yml]
...
</code></pre>
</notextile>

h3. Create an API token for the Keepproxy server

{% assign railscmd = "bundle exec ./script/get_anonymous_user_token.rb --get" %}
{% assign railsout = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" %}
The Keepproxy server needs a token to talk to the API server.  On the <strong>API server</strong>, use the following command to create the token.  {% include 'install_rails_command' %}

h3. Set up the Keepproxy service

Install runit to supervise the keepproxy daemon.  {% include 'install_runit' %}

The run script for the keepproxy service should set the environment variables @ARVADOS_API_TOKEN@ (with the token you just generated), @ARVADOS_API_HOST@, and, if needed, @ARVADOS_API_HOST_INSECURE@.  The core keepproxy command to run is:

<notextile>
<pre><code>ARVADOS_API_TOKEN=<span class="userinput">{{railsout}}</span> ARVADOS_API_HOST=<span class="userinput">uuid_prefix.your.domain</span> exec keepproxy
</code></pre>
</notextile>

h3. Set up a reverse proxy with SSL support

Because the Keepproxy is intended for access from anywhere on the internet, it is recommended to use SSL for transport encryption.

This is best achieved by putting a reverse proxy with SSL support in front of Keepproxy. Keepproxy itself runs on port 25107 by default; your reverse proxy can run on port 443 and pass requests to Keepproxy on port 25107.

<notextile><pre>
upstream keepproxy {
  server                127.0.0.1:<span class="userinput">25107</span>;
}

server {
  listen                <span class="userinput">[your public IP address]</span>:443 ssl;
  server_name           keep.<span class="userinput">uuid_prefix</span>.your.domain;

  proxy_connect_timeout 90s;
  proxy_read_timeout    300s;
  proxy_set_header      X-Real-IP $remote_addr;

  ssl                   on;
  ssl_certificate       /etc/nginx/keep.<span class="userinput">uuid_prefix</span>.your.domain-ssl.crt;
  ssl_certificate_key   /etc/nginx/keep.<span class="userinput">uuid_prefix</span>.your.domain-ssl.key;

  # Clients need to be able to upload blocks of data up to 64MiB in size.
  client_max_body_size  64m;

  location / {
    proxy_pass          http://keepproxy;
  }
}
</pre></notextile>

Note: if the Web uploader is failing to upload data and there are no logs from keepproxy, be sure to check the nginx proxy logs.  In addition to "GET" and "PUT", The nginx proxy must pass "OPTIONS" requests to keepproxy, which should respond with appropriate Cross-origin resource sharing headers.  If the CORS headers are not present, brower security policy will cause the upload request to silently fail.  The CORS headers are generated by keepproxy and should not be set in nginx.

h3. Tell the API server about the Keepproxy server

The API server needs to be informed about the presence of your Keepproxy server. Please execute the following commands on your <strong>shell server</strong>.

<notextile>
<pre><code>~$ <span class="userinput">uuid_prefix=`arv --format=uuid user current | cut -d- -f1`</span>
~$ <span class="userinput">echo "Site prefix is '$uuid_prefix'"</span>
~$ <span class="userinput">read -rd $'\000' keepservice &lt;&lt;EOF; arv keep_service create --keep-service "$keepservice"</span>
<span class="userinput">{
 "service_host":"<strong>keep.$uuid_prefix.your.domain</strong>",
 "service_port":443,
 "service_ssl_flag":true,
 "service_type":"proxy"
}
EOF</span>
</code></pre></notextile>
