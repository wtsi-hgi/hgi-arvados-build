---
layout: default
navsection: installguide
title: Install Keep-web server
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

The Keep-web server provides read/write HTTP (WebDAV) access to files stored in Keep. It serves public data to unauthenticated clients, and serves private data to clients that supply Arvados API tokens. It can be installed anywhere with access to Keep services, typically behind a web proxy that provides TLS support. See the "godoc page":http://godoc.org/github.com/curoverse/arvados/services/keep-web for more detail.

By convention, we use the following hostnames for the Keep-web service:

<notextile>
<pre><code>download.<span class="userinput">uuid_prefix</span>.your.domain
collections.<span class="userinput">uuid_prefix</span>.your.domain
*.collections.<span class="userinput">uuid_prefix</span>.your.domain
</code></pre>
</notextile>

The above hostnames should resolve from anywhere on the internet.

h2. Install Keep-web

Typically Keep-web runs on the same host as Keepproxy.

On Debian-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo apt-get install keep-web</span>
</code></pre>
</notextile>

On Red Hat-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo yum install keep-web</span>
</code></pre>
</notextile>

Verify that @Keep-web@ is functional:

<notextile>
<pre><code>~$ <span class="userinput">keep-web -h</span>
Usage of keep-web:
  -allow-anonymous
        Serve public data to anonymous clients. Try the token supplied in the ARVADOS_API_TOKEN environment variable when none of the tokens provided in an HTTP request succeed in reading the desired collection. (default false)
  -attachment-only-host string
        Accept credentials, and add "Content-Disposition: attachment" response headers, for requests at this hostname:port. Prohibiting inline display makes it possible to serve untrusted and non-public content from a single origin, i.e., without wildcard DNS or TLS.
  -listen string
        Address to listen on: "host:port", or ":port" to listen on all interfaces. (default ":80")
  -trust-all-content
        Serve non-public content from a single origin. Dangerous: read docs before using!
</code></pre>
</notextile>

{% assign railscmd = "bundle exec ./script/get_anonymous_user_token.rb --get" %}
{% assign railsout = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" %}
If you intend to use Keep-web to serve public data to anonymous clients, configure it with an anonymous token. You can use the same one you used when you set up your Keepproxy server, or use the following command on the <strong>API server</strong> to create another. {% include 'install_rails_command' %}

Install runit to supervise the Keep-web daemon.  {% include 'install_runit' %}

The basic command to start Keep-web in the service run script is:

<notextile>
<pre><code>export ARVADOS_API_HOST=<span class="userinput">uuid_prefix</span>.your.domain
export ARVADOS_API_TOKEN="<span class="userinput">{{railsout}}</span>"
exec sudo -u nobody keep-web \
 -listen=<span class="userinput">:9002</span> \
 -attachment-only-host=<span class="userinput">download.uuid_prefix.your.domain</span> \
 -allow-anonymous \
 2&gt;&amp;1
</code></pre>
</notextile>

Omit the @-allow-anonymous@ argument if you do not want to serve public data.

Set @ARVADOS_API_HOST_INSECURE=1@ if your API server's TLS certificate is not signed by a recognized CA.

h3. Set up a reverse proxy with TLS support

The Keep-web service will be accessible from anywhere on the internet, so we recommend using TLS for transport encryption.

This is best achieved by putting a reverse proxy with TLS support in front of Keep-web, running on port 443 and passing requests to Keep-web on port 9002 (or whatever port you chose in your run script).

Note: A wildcard TLS certificate is required in order to support a full-featured secure Keep-web service. Without it, Keep-web can offer file downloads for all Keep data; however, in order to avoid cross-site scripting vulnerabilities, Keep-web refuses to serve private data as web content except when it is accessed using a "secret link" share. With a wildcard TLS certificate and DNS configured appropriately, all data can be served as web content.

For example, using Nginx:

<notextile><pre>
upstream keep-web {
  server                127.0.0.1:<span class="userinput">9002</span>;
}

server {
  listen                <span class="userinput">[your public IP address]</span>:443 ssl;
  server_name           download.<span class="userinput">uuid_prefix</span>.your.domain
                        collections.<span class="userinput">uuid_prefix</span>.your.domain
                        *.collections.<span class="userinput">uuid_prefix</span>.your.domain
                        ~.*--collections.<span class="userinput">uuid_prefix</span>.your.domain;

  proxy_connect_timeout 90s;
  proxy_read_timeout    300s;

  ssl                   on;
  ssl_certificate       <span class="userinput"/>YOUR/PATH/TO/cert.pem</span>;
  ssl_certificate_key   <span class="userinput"/>YOUR/PATH/TO/cert.key</span>;

  location / {
    proxy_pass          http://keep-web;
    proxy_set_header    Host            $host;
    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}
</pre></notextile>

{% include 'notebox_begin' %}
If you restrict access to your Arvados services based on network topology -- for example, your proxy server is not reachable from the public internet -- additional proxy configuration might be needed to thwart cross-site scripting attacks that would circumvent your restrictions. Read the "'Intranet mode' section of the Keep-web documentation":https://godoc.org/github.com/curoverse/arvados/services/keep-web#hdr-Intranet_mode now.
{% include 'notebox_end' %}

h3. Configure DNS

Configure your DNS servers so the following names resolve to your Nginx proxy's public IP address.
* @download.uuid_prefix.your.domain@
* @collections.uuid_prefix.your.domain@
* @*--collections.uuid_prefix.your.domain@, if you have a wildcard TLS certificate valid for @*.uuid_prefix.your.domain@ and your DNS server allows this without interfering with other DNS names.
* @*.collections.uuid_prefix.your.domain@, if you have a wildcard TLS certificate valid for these names.

If neither of the above wildcard options is feasible, you have two choices:
# Serve web content at @collections.uuid_prefix.your.domain@, but only for unauthenticated requests (public data and collection sharing links). Authenticated requests will always result in file downloads, using the @download@ name. For example, the Workbench "preview" button and the "view entire log file" link will invoke file downloads instead of displaying content in the browser window.
# In the special case where you know you are immune to XSS exploits, you can enable the "trust all content" mode in Keep-web (with the @-trust-all-content@ command line flag) and Workbench (with the @trust_all_content@ item in @application.yml@). With both of these enabled, inline web content can be served from a single @collections@ host name; no wildcard DNS or certificate is needed. Do not do this without understanding the security implications described in the "Keep-web documentation":http://godoc.org/github.com/curoverse/arvados/services/keep-web.

h3. Tell Workbench about the Keep-web service

Workbench has features like "download file from collection" and "show image" which work better if the content is served by Keep-web rather than Workbench itself. We recommend using the two different hostnames ("download" and "collections" above) for file downloads and inline content respectively.

Add the following entry to your Workbench configuration file (@/etc/arvados/workbench/application.yml@). This URL will be used for file downloads.

<notextile>
<pre><code>keep_web_download_url: https://download.<span class="userinput">uuid_prefix</span>.your.domain/c=%{uuid_or_pdh}
</code></pre>
</notextile>

Additionally, add *one* of the following entries to your Workbench configuration file, depending on your DNS setup. This URL will be used to serve user content that can be displayed in the browser, like image previews and static HTML pages.

<notextile>
<pre><code>keep_web_url: https://%{uuid_or_pdh}--collections.<span class="userinput">uuid_prefix</span>.your.domain
keep_web_url: https://%{uuid_or_pdh}.collections.<span class="userinput">uuid_prefix</span>.your.domain
keep_web_url: https://collections.<span class="userinput">uuid_prefix</span>.your.domain/c=%{uuid_or_pdh}
</code></pre>
</notextile>
