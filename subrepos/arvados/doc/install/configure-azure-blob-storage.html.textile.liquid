---
layout: default
navsection: installguide
title: Configure Azure Blob storage
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

Keepstore can store data in one or more Azure Storage containers.

h2. Set up VMs and Storage Accounts

Before starting the configuration of individual keepstore servers is good to have an idea of the keepstores servers' final layout. One key decision is the amount of servers and type of VM to run. Azure may change over time the bandwith capacity of each type. After conducting some empirical saturation tests, the conclusion was that the bandwith is proportional to the amount of cores with some exceptions. As a rule of thumb, is better to invest resources in more cores instead of memory or IOps.

Another decision is how many VMs should be running keepstore. For example there could be 8 VMs with one core each or one machine with 8 cores. Or anything in between. Assuming is the same cost for Cloud resources, there is always the benefit of distributing the risk of faulty VMs. The recommendation is to start with 2 VMs and expand in pairs. Having a minimum of 2 cores each. The total amount of VMs will be a function of the budget and the pipeline traffic to avoid saturation during periods of high usage. Standard D v3 family is a balanced choice, making Standard_D2_v3 the 2-core option

There are many options for storage accounts. You can read details from Azure on their documentation https://docs.microsoft.com/en-us/azure/storage/common/storage-introduction. The type of storage and access tier will be a function of the budget and desired responsiveness. A balanced option is to have General-purpose Standard Storage account and use Blob storage, hot access tiers.

Keepstore can be configure to reflect the level of underlaying redundancy the storage will have. This is call data replication option. For example LRS (Locally Redundant Storage) saves 3 copies of the data. There desired redundancy can be chosen at the keepstore layer or at the Storage Accunt layer. The decision where the redundancy will be done and the type of Storage Account data replication (LRS, ZRS, GRS and RA-GRS) has trade-offs. Please read more on https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy and decide what is best for your needs.

h2. Create a storage container

Using the Azure web portal or command line tool, create or choose a storage account with a suitable redundancy profile and availability region. Use the storage account keys to create a new container.

<notextile>
<pre><code>~$ <span class="userinput">azure config mode arm</span>
~$ <span class="userinput">azure login</span>
~$ <span class="userinput">azure group create exampleGroupName eastus</span>
~$ <span class="userinput">azure storage account create --type LRS --location eastus --resource-group exampleGroupName exampleStorageAccountName</span>
~$ <span class="userinput">azure storage account keys list --resource-group exampleGroupName exampleStorageAccountName</span>
info:    Executing command storage account keys list
+ Getting storage account keys
data:    Primary: zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz==
data:    Secondary: yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy==
info:    storage account keys list command OK
~$ <span class="userinput">AZURE_STORAGE_ACCOUNT="exampleStorageAccountName" \
AZURE_STORAGE_ACCESS_KEY="zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz==" \
azure storage container create exampleContainerName</span>
</code></pre>
</notextile>

Note that Keepstore services may be configued to use multiple Azure Storage accounts and multiple containers within a storage account.

h2. Configure keepstore

Copy the primary storage account key to a file where it will be accessible to keepstore at startup time.

<notextile>
<pre><code>~$ <span class="userinput">sudo sh -c 'cat &gt;/etc/arvados/keepstore/azure_storage_account_key.txt &lt;&lt;EOF'
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz==
EOF</span>
~$ <span class="userinput">sudo chmod 0400 /etc/arvados/keepstore/azure_storage_account_key.txt</span>
</code></pre>
</notextile>

Next, edit the @Volumes@ section of the @keepstore.yml@ config file:

<pre>
Volumes:
- # The volume type, this indicates Azure blob storage
  Type: Azure

  # How much replication is performed by the underlying container.
  # This is used to inform replication decisions at the Keep layer.
  AzureReplication: 3

  # The storage container to use for the backing store.
  ContainerName: exampleContainerName

  # If true, do not accept write or trash operations, only reads.
  ReadOnly: false

  # Amount of time to wait for a response before failing the request
  RequestTimeout: 2m0s

  # The storage account name, used for authentication
  StorageAccountName: exampleStorageAccountName

  # The storage account secret key, used for authentication
  StorageAccountKeyFile: /etc/arvados/keepstore/azure_storage_account_key.txt

  # The cloud environment to use.  If blank, use the default cloud
  # environment.  See below for an example of an alternate cloud environment.
  StorageBaseURL: ""

  # Storage classes to associate with this volume.  See "Storage
  # classes" in the "Admin" section of doc.arvados.org.
  StorageClasses: null

- # Example configuration to use Azure China.
  #
  # The alternate cloud environment to use.
  # Note that cloud environments are different from regions.  A
  # cloud environment is an entirely separate instance of Azure with
  # separate accounts, requiring separate credentials.
  #
  StorageBaseURL: core.chinacloudapi.cn
  StorageAccountKeyFile: /etc/arvados/keepstore/azure_cn_storage_account_key.txt
  StorageAccountName: cn-account-name
  ContainerName: exampleChinaContainerName

  # The rest are the same as above
  Type: Azure
  AzureReplication: 3
  ReadOnly: false
  RequestTimeout: 10m0s
  StorageClasses: null
</pre>

Start (or restart) keepstore, and check its log file to confirm it is using the new configuration.
