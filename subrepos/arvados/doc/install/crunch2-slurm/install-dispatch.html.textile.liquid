---
layout: default
navsection: installguide
title: Install the SLURM dispatcher

...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

The SLURM dispatcher can run on any node that can submit requests to both the Arvados API server and the SLURM controller.  It is not resource-intensive, so you can run it on the API server node.

h2. Install the dispatcher

First, "add the appropriate package repository for your distribution":{{ site.baseurl }}/install/install-manual-prerequisites.html#repos.

On Red Hat-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo yum install crunch-dispatch-slurm</span>
~$ <span class="userinput">sudo systemctl enable crunch-dispatch-slurm</span>
</code></pre>
</notextile>

On Debian-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo apt-get install crunch-dispatch-slurm</span>
</code></pre>
</notextile>

h2. Create a dispatcher token

Create an Arvados superuser token for use by the dispatcher. If you have multiple dispatch processes, you should give each one a different token.  *On the API server*, run:

<notextile>
<pre><code>apiserver:~$ <span class="userinput">cd /var/www/arvados-api/current</span>
apiserver:/var/www/arvados-api/current$ <span class="userinput">sudo -u <b>webserver-user</b> RAILS_ENV=production bundle exec script/create_superuser_token.rb</span>
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
</code></pre>
</notextile>

h2. Configure the dispatcher

Set up crunch-dispatch-slurm's configuration directory:

<notextile>
<pre><code>~$ <span class="userinput">sudo mkdir -p /etc/arvados</span>
~$ <span class="userinput">sudo install -d -o root -g <b>crunch</b> -m 0750 /etc/arvados/crunch-dispatch-slurm</span>
</code></pre>
</notextile>

Edit @/etc/arvados/crunch-dispatch-slurm/crunch-dispatch-slurm.yml@ to authenticate to your Arvados API server, using the token you generated in the previous step.  Follow this YAML format:

<notextile>
<pre><code class="userinput">Client:
  APIHost: <b>zzzzz.arvadosapi.com</b>
  AuthToken: <b>zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz</b>
</code></pre>
</notextile>

This is the only configuration required by crunch-dispatch-slurm.  The subsections below describe optional configuration flags you can set inside the main configuration object.

h3. Client::KeepServiceURIs

Override Keep service discovery with a predefined list of Keep URIs. This can be useful if the compute nodes run a local keepstore that should handle all Keep traffic. Example:

<notextile>
<pre><code class="userinput">Client:
  APIHost: zzzzz.arvadosapi.com
  AuthToken: zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
  KeepServiceURIs:
  - <b>http://127.0.0.1:25107</b>
</code></pre>
</notextile>

h3. PollPeriod

crunch-dispatch-slurm polls the API server periodically for new containers to run.  The @PollPeriod@ option controls how often this poll happens.  Set this to a string of numbers suffixed with one of the time units @ns@, @us@, @ms@, @s@, @m@, or @h@.  For example:

<notextile>
<pre><code class="userinput">PollPeriod: <b>3m30s</b>
</code></pre>
</notextile>

h3. PrioritySpread

crunch-dispatch-slurm adjusts the "nice" values of its SLURM jobs to ensure containers are prioritized correctly relative to one another. This option tunes the adjustment mechanism.
* If non-Arvados jobs run on your SLURM cluster, and your Arvados containers are waiting too long in the SLURM queue because their "nice" values are too high for them to compete with other SLURM jobs, you should use a smaller PrioritySpread value.
* If you have an older SLURM system that limits nice values to 10000, a smaller @PrioritySpread@ can help avoid reaching that limit.
* In other cases, a larger value is beneficial because it reduces the total number of adjustments made by executing @scontrol@.

The smallest usable value is @1@. The default value of @10@ is used if this option is zero or negative. Example:

<notextile>
<pre><code class="userinput">PrioritySpread: <b>1000</b>
</code></pre>
</notextile>



h3. SbatchArguments

When crunch-dispatch-slurm invokes @sbatch@, you can add switches to the command by specifying @SbatchArguments@.  You can use this to send the jobs to specific cluster partitions or add resource requests.  Set @SbatchArguments@ to an array of strings.  For example:

<notextile>
<pre><code class="userinput">SbatchArguments:
- <b>"--partition=PartitionName"</b>
</code></pre>
</notextile>

h3. CrunchRunCommand: Dispatch to SLURM cgroups

If your SLURM cluster uses the @task/cgroup@ TaskPlugin, you can configure Crunch's Docker containers to be dispatched inside SLURM's cgroups.  This provides consistent enforcement of resource constraints.  To do this, use a crunch-dispatch-slurm configuration like the following:

<notextile>
<pre><code class="userinput">CrunchRunCommand:
- <b>crunch-run</b>
- <b>"-cgroup-parent-subsystem=memory"</b>
</code></pre>
</notextile>

The choice of subsystem ("memory" in this example) must correspond to one of the resource types enabled in SLURM's @cgroup.conf@. Limits for other resource types will also be respected.  The specified subsystem is singled out only to let Crunch determine the name of the cgroup provided by SLURM.

{% include 'notebox_begin' %}

Some versions of Docker (at least 1.9), when run under systemd, require the cgroup parent to be specified as a systemd slice.  This causes an error when specifying a cgroup parent created outside systemd, such as those created by SLURM.

You can work around this issue by disabling the Docker daemon's systemd integration.  This makes it more difficult to manage Docker services with systemd, but Crunch does not require that functionality, and it will be able to use SLURM's cgroups as container parents.  To do this, "configure the Docker daemon on all compute nodes":install-compute-node.html#configure_docker_daemon to run with the option @--exec-opt native.cgroupdriver=cgroupfs@.

{% include 'notebox_end' %}

h3. CrunchRunCommand: Using host networking for containers

Older Linux kernels (prior to 3.18) have bugs in network namespace handling which can lead to compute node lockups.  This by is indicated by blocked kernel tasks in "Workqueue: netns cleanup_net".   If you are experiencing this problem, as a workaround you can disable use of network namespaces by Docker across the cluster.  Be aware this reduces container isolation, which may be a security risk.

<notextile>
<pre><code class="userinput">CrunchRunCommand:
- <b>crunch-run</b>
- <b>"-container-enable-networking=always"</b>
- <b>"-container-network-mode=host"</b>
</code></pre>
</notextile>

h3. MinRetryPeriod: Rate-limit repeated attempts to start containers

If SLURM is unable to run a container, the dispatcher will submit it again after the next PollPeriod. If PollPeriod is very short, this can be excessive. If MinRetryPeriod is set, the dispatcher will avoid submitting the same container to SLURM more than once in the given time span.

<notextile>
<pre><code class="userinput">MinRetryPeriod: <b>30s</b>
</code></pre>
</notextile>

h2. Restart the dispatcher

{% include 'notebox_begin' %}

The crunch-dispatch-slurm package includes configuration files for systemd.  If you're using a different init system, you'll need to configure a service to start and stop a @crunch-dispatch-slurm@ process as desired.  The process should run from a directory where the @crunch@ user has write permission on all compute nodes, such as its home directory or @/tmp@.  You do not need to specify any additional switches or environment variables.

{% include 'notebox_end' %}

Restart the dispatcher to run with your new configuration:

<notextile>
<pre><code>~$ <span class="userinput">sudo systemctl restart crunch-dispatch-slurm</span>
</code></pre>
</notextile>
