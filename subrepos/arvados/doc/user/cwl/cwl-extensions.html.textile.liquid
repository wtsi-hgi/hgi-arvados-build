---
layout: default
navsection: userguide
title: Arvados CWL Extensions
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

Arvados provides several extensions to CWL for workflow optimization, site-specific configuration, and to enable access the Arvados API.

To use Arvados CWL extensions, add the following @$namespaces@ section at the top of your CWL file:

<pre>
$namespaces:
  arv: "http://arvados.org/cwl#"
  cwltool: "http://commonwl.org/cwltool#"
</pre>

For portability, Arvados extensions should go into the @hints@ section of your CWL file, for example:

<pre>
hints:
  arv:RunInSingleContainer: {}
  arv:RuntimeConstraints:
    keep_cache: 123456
    outputDirType: keep_output_dir
  arv:PartitionRequirement:
    partition: dev_partition
  arv:APIRequirement: {}
  cwltool:LoadListingRequirement:
    loadListing: shallow_listing
  arv:IntermediateOutput:
    outputTTL: 3600
  arv:ReuseRequirement:
    enableReuse: false
  cwltool:Secrets:
    secrets: [input1, input2]
</pre>

The one exception to this is @arv:APIRequirement@, see note below.

h2. arv:RunInSingleContainer

Indicates that a subworkflow should run in a single container and not be scheduled as separate steps.

h2. arv:RuntimeConstraints

Set Arvados-specific runtime hints.

table(table table-bordered table-condensed).
|_. Field |_. Type |_. Description |
|keep_cache|int|Size of file data buffer for Keep mount in MiB. Default is 256 MiB. Increase this to reduce cache thrashing in situations such as accessing multiple large (64+ MiB) files at the same time, or performing random access on a large file.|
|outputDirType|enum|Preferred backing store for output staging.  If not specified, the system may choose which one to use.  One of *local_output_dir* or *keep_output_dir*|

*local_output_dir*: Use regular file system local to the compute node. There must be sufficient local scratch space to store entire output; specify this with @outdirMin@ of @ResourceRequirement@.  Files are batch uploaded to Keep when the process completes.  Most compatible, but upload step can be time consuming for very large files.

*keep_output_dir*: Use writable Keep mount.  Files are streamed to Keep as they are written.  Does not consume local scratch space, but does consume RAM for output buffers (up to 192 MiB per file simultaneously open for writing.)  Best suited to processes which produce sequential output of large files (non-sequential writes may produced fragmented file manifests).  Supports regular files and directories, does not support special files such as symlinks, hard links, named pipes, named sockets, or device nodes.|

h2. arv:PartitionRequirement

Select preferred compute partitions on which to run jobs.

table(table table-bordered table-condensed).
|_. Field |_. Type |_. Description |
|partition|string or array of strings||

h2. arv:APIRequirement

Indicates that process wants to access to the Arvados API.  Will be granted network access and have @ARVADOS_API_HOST@ and @ARVADOS_API_TOKEN@ set in the environment.  Tools which rely on the Arvados API being present should put @arv:APIRequirement@ in the @requirements@ section of the tool (rather than @hints@) to indicate that that it is not portable to non-Arvados CWL runners.

Use @arv:APIRequirement@ in @hints@ to enable general (non-Arvados-specific) network access for a tool.

h2. cwltool:LoadListingRequirement

In CWL v1.0 documents, the default behavior for Directory objects is to recursively expand the @listing@ for access by parameter references an expressions.  For directory trees containing many files, this can be expensive in both time and memory usage.  Use @cwltool:LoadListingRequirement@ to change the behavior for expansion of directory listings in the workflow runner.

table(table table-bordered table-condensed).
|_. Field |_. Type |_. Description |
|loadListing|string|One of @no_listing@, @shallow_listing@, or @deep_listing@|

*no_listing*: Do not expand directory listing at all.  The @listing@ field on the Directory object will be undefined.

*shallow_listing*: Only expand the first level of directory listing.  The @listing@ field on the toplevel Directory object will contain the directory contents, however @listing@ will not be defined on subdirectories.

*deep_listing*: Recursively expand all levels of directory listing.  The @listing@ field will be provided on the toplevel object and all subdirectories.

h2. arv:IntermediateOutput

Specify desired handling of intermediate output collections.

table(table table-bordered table-condensed).
|_. Field |_. Type |_. Description |
|outputTTL|int|If the value is greater than zero, consider intermediate output collections to be temporary and should be automatically trashed. Temporary collections will be trashed @outputTTL@ seconds after creation.  A value of zero means intermediate output should be retained indefinitely (this is the default behavior).
Note: arvados-cwl-runner currently does not take workflow dependencies into account when setting the TTL on an intermediate output collection. If the TTL is too short, it is possible for a collection to be trashed before downstream steps that consume it are started.  The recommended minimum value for TTL is the expected duration of the entire the workflow.|

h2. arv:ReuseRequirement

Enable/disable work reuse for current process.  Default true (work reuse enabled).

table(table table-bordered table-condensed).
|_. Field |_. Type |_. Description |
|enableReuse|boolean|Enable/disable work reuse for current process.  Default true (work reuse enabled).|

h2. cwltool:Secrets

Indicate that one or more input parameters are "secret".  Must be applied at the top level Workflow.  Secret parameters are not stored in keep, are hidden from logs and API responses, and are wiped from the database after the workflow completes.

table(table table-bordered table-condensed).
|_. Field |_. Type |_. Description |
|secrets|array<string>|Input parameters which are considered "secret".  Must be strings.|
